name: Build Multi-Platform Executables (Fixed)

on:
  push:
    branches: [ main, master ]
    tags:
      - 'v*'
      - '*'
  pull_request:
    branches: [ main, master ]
  release:
    types: [ published ]

permissions:
  contents: write
  actions: read
  checks: write

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-13]
        include:
          - os: ubuntu-latest
            platform: linux
            executable_name: mouse-clicker
            build_script: build_linux.sh
          - os: windows-latest
            platform: windows
            executable_name: mouse-clicker.exe
            build_script: build_windows.bat
          - os: macos-13
            platform: macos
            executable_name: mouse-clicker
            build_script: build_macos.sh
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
    
    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          ${{ runner.os == 'Windows' && '~\AppData\Local\pip\Cache' || '~/.cache/pip' }}
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies (Windows)
      if: matrix.os == 'windows-latest'
      timeout-minutes: 20
      shell: pwsh
      run: |
        python -m pip install --upgrade pip --no-warn-script-location
        Write-Host "Windows平台：安装依赖"
        
        # 简单安装，不使用复杂的错误处理
        pip install --no-warn-script-location --timeout=600 --retries=3 -r requirements.txt
        pip install --no-warn-script-location --timeout=600 --retries=3 pyinstaller
        
        Write-Host "依赖安装完成"
    
    - name: Install dependencies (Unix)
      if: matrix.os != 'windows-latest'
      timeout-minutes: 20
      shell: bash
      run: |
        python -m pip install --upgrade pip --no-warn-script-location
        echo "Unix平台：标准安装"
        pip install --no-warn-script-location --timeout=300 -r requirements.txt
        pip install --no-warn-script-location --timeout=300 pyinstaller
        echo "依赖安装完成"
    
    - name: Build executable (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        chmod +x ${{ matrix.build_script }}
        ./${{ matrix.build_script }}
    
    - name: Build executable (Windows)
      if: matrix.os == 'windows-latest'
      timeout-minutes: 25
      shell: cmd
      run: |
        echo 开始Windows构建...
        call ${{ matrix.build_script }}
        if %ERRORLEVEL% NEQ 0 (
          echo 构建失败，错误代码: %ERRORLEVEL%
          exit /b %ERRORLEVEL%
        )
        echo Windows构建完成
    
    - name: Find executable path
      id: find_exe
      shell: bash
      run: |
        echo "=== 调试信息：查找可执行文件 ==="
        echo "当前目录内容："
        ls -la
        echo "dist目录内容："
        ls -la dist/ || echo "dist目录不存在"
        
        if [ "${{ matrix.platform }}" = "windows" ]; then
          exe_path=$(find dist -name "*.exe" -type f | head -1)
        elif [ "${{ matrix.platform }}" = "macos" ]; then
          # macOS: 查找.app包或可执行文件
          if [ -d "dist/*.app" ]; then
            exe_path=$(find dist -name "*.app" -type d | head -1)
          else
            exe_path=$(find dist -type f -executable | head -1)
          fi
        else
          # Linux: 查找可执行文件
          exe_path=$(find dist -type f -executable | head -1)
        fi
        
        echo "找到的可执行文件路径: $exe_path"
        
        if [ -z "$exe_path" ]; then
          echo "错误：未找到可执行文件"
          find dist -type f 2>/dev/null || echo "无法列出dist目录内容"
          exit 1
        fi
        
        if [ ! -e "$exe_path" ]; then
          echo "错误：文件不存在: $exe_path"
          exit 1
        fi
        
        echo "executable_path=$exe_path" >> $GITHUB_OUTPUT
        echo "成功找到可执行文件: $exe_path"
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.platform }}-executable
        path: ${{ steps.find_exe.outputs.executable_path }}
        retention-days: 30
        if-no-files-found: error