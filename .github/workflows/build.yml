name: Build Multi-Platform Executables

on:
  push:
    branches: [ main, master ]
    tags:
      - 'v*'
      - '*'
  pull_request:
    branches: [ main, master ]
  release:
    types: [ published ]

permissions:
  contents: write
  actions: read
  checks: write

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-13]
        include:
          - os: ubuntu-latest
            platform: linux
            executable_name: 小宝工具集之点击器
            build_script: build_linux.sh
          - os: windows-latest
            platform: windows
            executable_name: 小宝工具集之点击器.exe
            build_script: build_windows.bat
          - os: macos-13
            platform: macos
            executable_name: 小宝工具集之点击器
            build_script: build_macos.sh
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Build executable (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        chmod +x ${{ matrix.build_script }}
        ./${{ matrix.build_script }}
    
    - name: Build executable (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        .\${{ matrix.build_script }}
    
    - name: Find executable path
      id: find_exe
      shell: bash
      run: |
        echo "=== 调试信息：查找可执行文件 ==="
        echo "当前目录内容："
        ls -la
        echo "dist目录内容："
        ls -la dist/ || echo "dist目录不存在"
        
        if [ "${{ matrix.platform }}" = "windows" ]; then
          # Windows平台：先检查dist/windows目录
          if [ -d "dist/windows" ]; then
            exe_path=$(find dist/windows -name "*.exe" -type f | head -1)
          else
            exe_path=$(find dist -name "*.exe" -type f | head -1)
          fi
        elif [ "${{ matrix.platform }}" = "macos" ]; then
          # macOS可能生成.app包或直接的可执行文件
          if [ -d "dist/${{ matrix.executable_name }}.app" ]; then
            exe_path="dist/${{ matrix.executable_name }}.app"
          elif [ -d "dist/macos" ]; then
            exe_path=$(find dist/macos -name "${{ matrix.executable_name }}" -type f | head -1)
          else
            exe_path=$(find dist -name "${{ matrix.executable_name }}" -type f | head -1)
          fi
          # 如果没找到，尝试查找任何可执行文件
          if [ -z "$exe_path" ]; then
            exe_path=$(find dist -type f -executable | head -1)
          fi
        else
          # Linux平台：先检查dist/linux目录
          if [ -d "dist/linux" ]; then
            exe_path=$(find dist/linux -name "${{ matrix.executable_name }}" -type f | head -1)
          else
            exe_path=$(find dist -name "${{ matrix.executable_name }}" -type f | head -1)
          fi
          # 如果没找到，尝试查找任何可执行文件
          if [ -z "$exe_path" ]; then
            exe_path=$(find dist -type f -executable | head -1)
          fi
        fi
        
        echo "找到的可执行文件路径: $exe_path"
        
        # 检查路径是否为空
        if [ -z "$exe_path" ]; then
          echo "错误：未找到可执行文件"
          echo "dist目录完整内容："
          find dist -type f 2>/dev/null || echo "无法列出dist目录内容"
          exit 1
        fi
        
        # 检查文件是否存在
        if [ ! -e "$exe_path" ]; then
          echo "错误：文件不存在: $exe_path"
          exit 1
        fi
        
        echo "executable_path=$exe_path" >> $GITHUB_OUTPUT
        echo "成功找到可执行文件: $exe_path"
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.platform }}-executable
        path: ${{ steps.find_exe.outputs.executable_path }}
        retention-days: 30
        if-no-files-found: error
    
    - name: Prepare release file (Unix)
      if: (github.event_name == 'release' || startsWith(github.ref, 'refs/tags/')) && matrix.os != 'windows-latest'
      id: prepare_release_unix
      shell: bash
      run: |
        if [ "${{ matrix.platform }}" = "macos" ] && [[ "${{ steps.find_exe.outputs.executable_path }}" == *".app" ]]; then
          # macOS .app 包需要压缩
          cd dist
          version_tag="${{ github.ref_name }}"
          zip -r "xiaobaodianjiqi-${{ matrix.executable_name }}-macos-${version_tag}.zip" "${{ matrix.executable_name }}.app"
          echo "release_file=dist/xiaobaodianjiqi-${{ matrix.executable_name }}-macos-${version_tag}.zip" >> $GITHUB_OUTPUT
          echo "release_name=xiaobaodianjiqi-${{ matrix.executable_name }}-macos-${version_tag}.zip" >> $GITHUB_OUTPUT
        else
          # Linux平台：创建带平台标识和版本号的文件副本
          original_path="${{ steps.find_exe.outputs.executable_path }}"
          version_tag="${{ github.ref_name }}"
          new_name="xiaobaodianjiqi-${{ matrix.executable_name }}-linux-${version_tag}"
          
          # 获取文件所在目录
          file_dir=$(dirname "$original_path")
          
          # 创建带平台标识和版本号的副本
          cp "$original_path" "$file_dir/$new_name"
          
          echo "release_file=$file_dir/$new_name" >> $GITHUB_OUTPUT
          echo "release_name=$new_name" >> $GITHUB_OUTPUT
        fi
    
    - name: Prepare release file (Windows)
      if: (github.event_name == 'release' || startsWith(github.ref, 'refs/tags/')) && matrix.os == 'windows-latest'
      id: prepare_release_windows
      shell: pwsh
      run: |
        # Windows平台：创建带平台标识和版本号的文件副本
        $originalPath = "${{ steps.find_exe.outputs.executable_path }}"
        $baseName = "${{ matrix.executable_name }}" -replace '\.exe$', ''
        $versionTag = "${{ github.ref_name }}"
        $newName = "xiaobaodianjiqi-$baseName-windows-$versionTag.exe"
        
        Write-Host "=== Windows文件准备调试信息 ==="
        Write-Host "原始路径: $originalPath"
        Write-Host "基础名称: $baseName"
        Write-Host "版本标签: $versionTag"
        Write-Host "新文件名: $newName"
        
        # 检查原始文件是否存在
        if (-not (Test-Path $originalPath)) {
            Write-Host "错误：原始文件不存在: $originalPath"
            Get-ChildItem -Path "dist" -Recurse -File | ForEach-Object { Write-Host $_.FullName }
            exit 1
        }
        
        # 获取文件所在目录
        $fileDir = Split-Path $originalPath -Parent
        $newPath = Join-Path $fileDir $newName
        
        Write-Host "文件目录: $fileDir"
        Write-Host "新文件路径: $newPath"
        
        # 创建带平台标识和版本号的副本
        Copy-Item $originalPath $newPath
        
        # 验证新文件是否创建成功
        if (Test-Path $newPath) {
            Write-Host "✅ 文件创建成功: $newPath"
        } else {
            Write-Host "❌ 文件创建失败: $newPath"
            exit 1
        }
        
        # 转换为Unix风格路径用于GitHub Actions
        $unixPath = $newPath -replace '\\', '/'
        Write-Host "Unix风格路径: $unixPath"
        
        echo "release_file=$unixPath" >> $env:GITHUB_OUTPUT
        echo "release_name=$newName" >> $env:GITHUB_OUTPUT
    
    - name: Upload to release
      if: github.event_name == 'release' || startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ steps.prepare_release_unix.outputs.release_file || steps.prepare_release_windows.outputs.release_file }}
        tag_name: ${{ github.ref_name }}
        draft: false
        prerelease: false
        fail_on_unmatched_files: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 创建一个汇总任务，收集所有平台的构建结果
  summary:
    needs: build
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        merge-multiple: true
    
    - name: List built executables
      run: |
        echo "=== 构建完成的可执行文件 ==="
        find . -type f -executable -o -name "*.exe" -o -name "*.app" | sort
        echo "=== 文件大小信息 ==="
        find . -type f -executable -o -name "*.exe" | xargs ls -lh