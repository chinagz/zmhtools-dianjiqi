name: Build Multi-Platform Executables

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  release:
    types: [ published ]

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            platform: linux
            executable_name: mouse_clicker_linux
            build_script: build_linux.sh
          - os: windows-latest
            platform: windows
            executable_name: mouse_clicker_windows.exe
            build_script: build_windows.bat
          - os: macos-latest
            platform: macos
            executable_name: 小宝工具集之点击器
            build_script: build_macos.sh
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Build executable (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        chmod +x ${{ matrix.build_script }}
        ./${{ matrix.build_script }}
    
    - name: Build executable (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        ${{ matrix.build_script }}
    
    - name: Find executable path
      id: find_exe
      shell: bash
      run: |
        if [ "${{ matrix.platform }}" = "windows" ]; then
          exe_path=$(find dist -name "*.exe" -type f | head -1)
        elif [ "${{ matrix.platform }}" = "macos" ]; then
          # macOS可能生成.app包或直接的可执行文件
          if [ -d "dist/${{ matrix.executable_name }}.app" ]; then
            exe_path="dist/${{ matrix.executable_name }}.app"
          else
            exe_path=$(find dist -name "${{ matrix.executable_name }}" -type f | head -1)
          fi
        else
          exe_path=$(find dist -name "${{ matrix.executable_name }}" -type f | head -1)
        fi
        echo "executable_path=$exe_path" >> $GITHUB_OUTPUT
        echo "Found executable: $exe_path"
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.platform }}-executable
        path: ${{ steps.find_exe.outputs.executable_path }}
        retention-days: 30
    
    - name: Upload to release (if release)
      if: github.event_name == 'release'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ${{ steps.find_exe.outputs.executable_path }}
        asset_name: ${{ matrix.executable_name }}
        asset_content_type: application/octet-stream

  # 创建一个汇总任务，收集所有平台的构建结果
  summary:
    needs: build
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        merge-multiple: true
    
    - name: List built executables
      run: |
        echo "=== 构建完成的可执行文件 ==="
        find . -type f -executable -o -name "*.exe" -o -name "*.app" | sort
        echo "=== 文件大小信息 ==="
        find . -type f -executable -o -name "*.exe" | xargs ls -lh